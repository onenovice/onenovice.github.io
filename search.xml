<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>阿里云wordpress个人博客搭建</title>
      <link href="/blog/2020/08/24/a-li-yun-wordpress-ge-ren-bo-ke/"/>
      <url>/blog/2020/08/24/a-li-yun-wordpress-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="连接Ecs服务器"><a href="#连接Ecs服务器" class="headerlink" title="连接Ecs服务器"></a>连接Ecs服务器</h1><ol><li><p>打开系统自带的终端工具（或者其他ssh连接工具，将用户名密码，公网ip填入对应位置）</p></li><li><p>在终端中输入连接命令<code>ssh [username]@[ipaddress]</code>。您需要将其中的username和ipaddress替换为第1小节中创建的ECS服务器的登录名和公网地址。例如：</p><pre><code>ssh root@123.123.123.123 </code></pre></li></ol><a id="more"></a><h1 id="安装并配置MySQL"><a href="#安装并配置MySQL" class="headerlink" title="安装并配置MySQL"></a>安装并配置MySQL</h1><ol><li>执行如下命令，下载并安装MySQL官方的<code>Yum Repository</code>。</li></ol><pre><code>wget -i http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmyum -y install mysql57-community-release-el7-10.noarch.rpmyum -y install mysql-community-server</code></pre><ol start="2"><li><p>执行如下命令，启动 MySQL 数据库。</p><pre><code>systemctl start mysqld.service</code></pre></li><li><p>执行如下命令，查看MySQL运行状态。</p></li></ol><pre><code>systemctl status mysqld.service</code></pre><ol start="4"><li>执行以下命令，查看MySQL初始密码。</li></ol><pre><code>grep "password" /var/log/mysqld.log</code></pre><ol start="5"><li>执行以下命令，登录数据库。</li></ol><pre><code>mysql -uroot -p</code></pre><ol start="6"><li>执行以下命令，修改MySQL默认密码。</li></ol><pre><code>set global validate_password_policy=0;  #修改密码安全策略为低（只校验密码长度，至少8位）。ALTER USER 'root'@'localhost' IDENTIFIED BY '12345678';</code></pre><ol start="7"><li>执行以下命令，授予root用户远程管理权限。</li></ol><pre><code>GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '12345678';</code></pre><ol start="8"><li>输入<code>exit</code>退出数据库。</li></ol><h1 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h1><ol><li>安装Nginx运行所需要的插件。</li></ol><ul><li><p>安装gcc。gcc是Linux下的编译器，它可以编译C、C++、Ada、Object C和Java等语言。</p><pre><code>yum -y install gcc</code></pre></li><li><p>安装pcre。pcre是一个perl库，Nginx的HTTP模块使用pcre来解析正则表达式。</p><pre><code>yum install -y pcre pcre-devel</code></pre></li><li><p>安装zlib。zlib是一个文件压缩和解压缩的库，Nginx使用zlib对HTTP数据包进行gzip压缩和解压。</p><pre><code>yum install -y zlib zlib-devel</code></pre></li></ul><ol start="2"><li>下载Nginx安装包。</li></ol><pre><code>wget http://nginx.org/download/nginx-1.17.10.tar.gz</code></pre><ol start="3"><li>解压Nginx安装包。</li></ol><pre><code>tar -zxvf nginx-1.17.10.tar.gz</code></pre><ol start="4"><li>编译安装Nginx。</li></ol><pre><code>cd nginx-1.17.10./configuremake &amp;&amp; make install</code></pre><ol start="5"><li>启动Nginx。</li></ol><pre><code>cd /usr/local/nginx/sbin/nginx</code></pre><ol start="6"><li>测试Nginx启动。在浏览器地址栏输入ECS服务器的公网地址，例如<code>123.123.123.123</code>，出现如下界面表示安装启动成功。</li></ol><p><img src="https://img.alicdn.com/tfs/TB1i4z6HAL0gK0jSZFtXXXQCXXa-736-254.png" alt="Nginx"></p><h1 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h1><ol><li>安装PHP。</li></ol><pre><code>yum -y install php php-mysql php-fpm</code></pre><ol start="2"><li>在nginx.conf文件中增加对PHP的支持。</li></ol><pre><code>vim /usr/local/nginx/conf/nginx.conf</code></pre><p>进入Vim编辑器后，按下<code>i</code>键进入编辑模式，在server的根路由配置中新增<code>index.php</code>。</p><pre><code>location / {      root   html;      index  index.html index.htm index.php;}</code></pre><p>并在根路由下面新增以下配置。</p><pre><code>if (!-e $request_filename) {     rewrite ^/(.*)$ /index.php/$1 last;}location ~ .*\.php(\/.*)*$ {     fastcgi_pass   127.0.0.1:9000;     include       fastcgi.conf;     fastcgi_index  index.php;}</code></pre><p>修改后的nginx.conf文件如下图所示。</p><p><img src="https://img.alicdn.com/tfs/TB1SUj8HuH2gK0jSZFEXXcqMpXa-644-873.png"></p><p>按下<code>ESC</code>键，输入<code>:wq</code>保存并退出Vim编辑器。</p><ol start="3"><li>重启php-fpm服务。</li></ol><pre><code>systemctl restart php-fpm</code></pre><ol start="4"><li>重启Nginx服务。</li></ol><pre><code>/usr/local/nginx/sbin/nginx -s reload</code></pre><ol start="5"><li>检查PHP安装。</li></ol><p>a. 在Nginx的网站根目录下创建PHP探针文件phpinfo.php。</p><pre><code>echo "&lt;?php phpinfo(); ?&gt;" &gt; /usr/local/nginx/html/phpinfo.php</code></pre><p>b. 访问PHP探针页面。在浏览器地址栏输入<code>xx.xx.xx.xx/phpinfo.php</code>（请将<code>xx.xx.xx.xx</code>替换为ECS服务器的公网地址），出现如下页面表示PHP环境配置成功。</p><p><img src="https://img.alicdn.com/tfs/TB1PJf7HEH1gK0jSZSyXXXtlpXa-626-902.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建个人博客</title>
      <link href="/blog/2020/08/20/hexo-da-jian-ge-ren-bo-ke/"/>
      <url>/blog/2020/08/20/hexo-da-jian-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>自己搭建一个博客有助于养成随时记录学习的习惯，但自己买服务器又不舍得怎么办——先搭个免费的练练手，等觉得有必要花钱建正规博客再转战！</p><a id="more"></a><p><strong>干前提醒：用这种方式搭建的博客，你需要具备MarkDown语法知识（或者你只是在名称是xxx.md的文件中写着txt文档的内容，完全没用到语法。。。那也行。不过满是大小一致字体,没有图和表的博客文章可能会很枯燥……当记事本的请随意），或者决心学习MD,因为写博客时都是MD语法。当然如果你学会这种语法，你将受益终生。</strong></p><p>本文的博客是搭建在全球最大的同行交友网站Github上的(静态网站，不是那种花里胡哨的php搭建的网站)，本文默认你已经有一个<a href="https://www.github.com/">Github</a>账号了(实在搞不定，找度娘^-^)<br>教程涉及：</p><blockquote><p>1.安装Git<br>2.安装NodeJs </p><ol start="3"><li>安装hexo<br>4.生成SSH并添加到github </li><li>部署项目<br>6.上传到github 绑定个人域名</li><li>修改及配置主题</li><li>写文章</li></ol></blockquote><h1 id="开始搞活"><a href="#开始搞活" class="headerlink" title="开始搞活"></a>开始搞活</h1><h2 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h2><p>我的是windows环境，所以下载windows版本并安装就可以了。<a href="https://git-for-windows.github.io/">Git Bash windows下载</a></p><p>双击下载好的exe文件，一路next就好<br>安装好后，打开gitbash，查看版本命令：<code>git version</code></p><h2 id="2-安装NodeJs"><a href="#2-安装NodeJs" class="headerlink" title="2. 安装NodeJs"></a>2. 安装NodeJs</h2><p>Hexo是基于nodeJS环境的静态博客接下来安装nodejs, <a href="https://nodejs.org/en/">下载地址</a></p><p>下载好msi文件后，双击打开安装，也是一路next，不过在Custom Setup这一步记得选 Add to PATH 这样你就不用自己去配置电脑上环境变量了<br>装完在按 win + r 快捷键调出运行，然后输入cmd确定<br>查看版本命令：<code>node -v</code></p><h2 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h2><ol><li><p>在某个地方先创建一个文件夹（用来存放所有blog的东西），然后cd到该文件夹下。（或者在文件夹里右键打开git bash, 如果没有就算了。。。）</p></li><li><p>在gitbash界面安装hexo命令：npm i -g hexo<br>安装完成后，查看版本命令：<code>hexo v</code><br><img src="https://img-blog.csdnimg.cn/20200820101937489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpbmdqaWxpYW8=,size_16,color_FFFFFF,t_70#pic_center" alt="hexo查看version"></p></li><li><p>初始化hexo<br>输入命令<code>hexo init</code>，此时目录下会生成一些文件：</p></li></ol><blockquote><p>node_modules：是依赖包 public：存放的是生成的页面<br>scaffolds：命令生成文章等的模板<br>source：用命令创建的各种文章 themes：主题<br>_config.yml：整个博客的配置<br>db.json：source解析所得到的<br>package.json：项目所需模块项目的配置信息</p></blockquote><h2 id="4-与Gitthub建立联系"><a href="#4-与Gitthub建立联系" class="headerlink" title="4. 与Gitthub建立联系"></a>4. 与Gitthub建立联系</h2><ol><li>没账号的创建账号，有账号的继续。<br>在网页右上角点击“+”，创建一个repo，名称为 <strong>xxx.github.io</strong>, 其中xxx是你的github用户名称，按照这个规则创建才有用否则博客无法创建。<br><img src="https://img-blog.csdnimg.cn/2020082010324162.png#pic_center" alt="new-repo"><br><img src="https://img-blog.csdnimg.cn/20200820103616717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpbmdqaWxpYW8=,size_16,color_FFFFFF,t_70#pic_center" alt="create-repo"></li><li>回到gitbash中，配置github账户信息（中文部分都替换成你自己的，命令挨个执行）：</li></ol><p><code>git config --global user.name="你的名称"</code><br><code>git config --global user.email="你的邮箱"</code></p><ol start="3"><li><p>创建SSH<br>在gitbash中输入：<code>ssh-keygen -t rsa -C "你的邮箱</code>，生成ssh。然后通过命令<code>cd ~/.ssh</code>和<code>cat id_rsa.pub</code>,之后复制出现的内容。<br><img src="https://img-blog.csdnimg.cn/20200820105129364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpbmdqaWxpYW8=,size_16,color_FFFFFF,t_70#pic_center" alt="rsa"></p></li><li><p>在githu网站点击自己的用户头像，选择setting, 然后选择SSH and GPG选项，点击绿色的new ssh key,将复制的内容粘贴进第二个框（第一个是填描述或标题的，可以不填)，然后确定即可。在gitbash中执行<code>ssh -T git@github.com</code><br>出现下面内容代表配置ssh成功</p><blockquote><p>Hi xxx! You’ve successfully authenticated, but GitHub does not provide<br>shell access.</p></blockquote></li><li><p>最后<br>用编辑器打开你的blog项目文件夹，修改_config.yml文件的一些配置（注意修改<strong>你的github用户名</strong>）(冒号之后都是有一个英文空格的)：</p><pre><code>deploy:  type: git  repo: https://github.com/你的github用户名/你的github用户名.github.io.git  branch: master</code></pre><p>回到gitbash中，进入你的blog目录，分别执行以下命令：</p><pre><code>hexo cleanhexo generatehexo server</code></pre><p>注：hexo 3.0把服务器独立成个别模块，需要单独安装：npm i hexo-server。<br>hexo server是本地预览命令，打开浏览器，输入地址<a href="http://localhost:4000/">http://localhost:4000</a>预览。</p></li><li><p>上传到github<br>博客可不是在本地自己看的，所以要上传到github.<br>先安装一波：<code>npm install hexo-deployer-git --save</code>（这样才能将你写好的文章部署到github服务器上并让别人浏览到）<br>执行命令(建议每次都按照如下步骤部署)：</p><pre><code>hexo cleanhexo generatehexo deploy</code></pre><p>在浏览器中输入<a href="http://yourgithubname.github.io就可以看到你的个人博客啦!/">http://yourgithubname.github.io就可以看到你的个人博客啦！</a></p></li></ol><h2 id="7-修改配置主题"><a href="#7-修改配置主题" class="headerlink" title="7.修改配置主题"></a>7.修改配置主题</h2><p>hexo初始化之后默认的主题是landscape , 然后你可以去<a href="https://hexo.io/themes/">这个地址</a>里面找到你想要的主题。<br>对于要使用的主题，你只需要把hexo文件夹里的_config.yml,将theme: landscape修改为theme: xxx即可（注意冒号后有英文空格），然后</p><pre><code>hexo cleanhexo generatehexo deploy</code></pre><p>部署完成后，可能会有半分钟延迟生效。想立刻看效果可以先本地预览。<br>关于具体主题内页面的配置和主题安装，在相应主题的<strong>ReadMe.md</strong>中有详细说明。</p><h2 id="8-写文章"><a href="#8-写文章" class="headerlink" title="8. 写文章"></a>8. 写文章</h2><p>新建文章：hexo new ‘文章名’，然后你就可以在source/_posts路径下看到你创建的文章啦，编辑完成之后按照前面说的方式部署，在浏览器刷新就能看到你的文章了。<br>或者直接将MD文件复制进source/_posts文件夹里，然年后使用复合命令<code>hexo d -g</code>上传到博客网站。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>希望每个人都爱上写博客 <strong>^-^</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>诗歌</title>
      <link href="/blog/2020/08/19/poem/"/>
      <url>/blog/2020/08/19/poem/</url>
      
        <content type="html"><![CDATA[<p>王阳明过金山</p><a id="more"></a><p>金山一点大如拳<br>打破维扬水底天<br>醉倚妙台楼上月<br>玉箫吹彻洞龙眠</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> poem </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
